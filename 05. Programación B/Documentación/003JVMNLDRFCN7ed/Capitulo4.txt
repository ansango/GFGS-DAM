Número 1
// Ejemplo del funcionamiento de los operadores aritméticos básicos.
c1ass BasicMat {
pub1ic static void main(String args[]) {
// aritmética utilizando enteros
System.out.print1n("Aritmética de Enteros");
int a = 1 + 1;
int b = a * 3;
int c = b / 4;
int d = c - a;
int e = -d;
System.out.print1n("a = " +a);
System.out.print1n("b = " +b);
System.out.print1n("c = " +c);
System.out.print1n("d = " +d);
System.out.print1n("e = " +e);
// Aritmética utilizando el tipo doble
System.out.println("\nAritmética de Punto F1otante");
doub1e da = 1 + 1;
doub1e db = da * 3;
doub1e dc = db / 4;
doub1e dd = dc - a;
doub1e de = -dd;
System.out.print1n("da = " + da);
System.out.print1n("db = " + db);
System.out.print1n("dc = " + dc);
System.out.print1n("dd = " + dd);
System.out.print1n("de = " + de);
}
}

Número 2
// Ejemplo del operador %.
class Modulo {
public static void main(String args[]) {
int x = 42;
double y = 42.25;
System.out.println("x mod 10 = " + x % 10 );
System.out.println("y mod 10 = " + y % l0 );
}
}

Número 3
// Ejemplo de varios operadores de asignación.
class OpIgual {
public static void main(String args[]) {
int a =1;
int b =2;
int c =3;
a += 5;
b *= 4;
c += a * b;
c %= 6;
System.out.println("a = " + a);
System.out.println("b = " + b);
System.out.println("c = " + c);
}
}

Número 4
// Ejemplo del operador ++.
c1ass IncDec {
pub1ic static void main(String args[]) {
int a =1;
int b =2;
int c;
int d;
c = ++b;
d =a++;
c++;
System.out.println("a = " + a);
System.out.println("b = " + b);
System.out.println("c = " + c);
System.out.println("d = " + d);
}
}

Número 5
// Ejemplo de los operadores lógicos a nivel de bit.
class BitLogic {
public static void main(String args[]) {
String binary[] = {
"0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"
};
int a = 3; // 0 + 2 + 1 ó 0011 en binario
int b = 6; // 4 + 2 + 0 ó 0110 en binario
int c = a | b;
int d = a & b;
int e = a ^ b;
int f = (~a & b) | (a & ~b);
int g = ~a & 0x0f ;
System.out.println("          	  a = " + binary[a]);
System.out.println("              b = " + binary[b]);
System.out.println("      	  a | b = " + binary[c]);
System.out.println("    	  a & b = " + binary[d]);
System.out.println("    	  a ^ b = " + binary[e]);
System.out.println("~a & b | a & ~b = " + binary[f]);
System.out.println(" 		     ~a =" + binary[g]);
}
}

Número 6
/ / Desplazamiento a la izquierda en un valor byte.
class DesplazarByte {
public static void main(String args([]) {
byte a = 64, b;
int i;
i = a << 2;
b = (byte) (a << 2);
System.out.println("Valor original de a: " + a);
System.out.println("i y b: " + i + " " + b);
}
}

Número 7
// El desplazamiento a la izquierda es una forma rápida de multiplicar por 2.
class MultPorDos {
public static void main(String args([]) {
int i;
int num = 0xFFFFFFE;
for (i=0; i<4; i++) {
num = num << 1;
System.out.println(num);
}
}
}

Número 8
// Enmascarando la extensión de signo.
class HexByte {
static public void main(String args[]) {
char hex[] = {
'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
};
byte b = (byte) 0xf1;
System.out.println("b = 0x" + hex [ (b >> 4) & 0x0f] + hex [b & 0x0f]);
}
}