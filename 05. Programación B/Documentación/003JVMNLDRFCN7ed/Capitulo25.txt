Número 1
/*
* <applet code="SimpleImageLoad" width=248 height=146>
* <param name="img" value="seattle.jpg">
* </applet>
*/
import java.awt.*;
import java.applet.*;
public class SimpleImageLoad extends Applet 
{
Image img;
public void init() {
img =getImage (getDocumentBase (), getParameter("img"));
}
public void paint(Graphics g) {
g.drawImage(img, 0, 0, this);
}
}

Número 2
public boolean imageUpdate(Image img, int flags,
int x, int y, int w, int h) {
if ((flags & ALLBITS) == 0) {
System.out.println("La imagen todavía se está procesando.");
return true;
} else {
System.out.println("Terminado el procesamiento de la imagen.");
return false;
}
}

Número 3
/*
* <applet code=DoubleBuffer width=250 height=250>
* </applet>
*/
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class DoubleBuffer extends Applet {
int gap = 3;
int mx, my;
boolean flicker = true;
Image buffer = null;
int w, h;
public void init () {
Dimension d = getSize();
w =d.width;
h =d.height;
buffer = createImage(w, h);
addMouseMotionListener(new MouseMotionAdapter() {
public void mouseDragged(MouseEvent me) {
mx = me.getX () ;
my =me.getY();
flicker =false;
repaint() ;
}
public void mouseMoved(MouseEvent me) {
mx = me.getX();
my =me.getY();
flicker =true;
repaint() ;
}
});
}
public void paint(Graphics g) {
Graphics screengc = null;
if (!flicker) {
screengc = g;
g =buffer.getGraphics();
}
g.setColor(Color.blue) ;
g.fillRect(0, 0, w, h);
g.setColor(Color.red) ;
for (int i=0; i<w; i+=gap)
g.drawLine(i, 0, w-i, h);
for (int i=0; i<h; i+=gap)
g.drawLine(0, i, w, h-i);
g.setColor(Color.black);
g.drawString ("Pulse el botón del ratón para activar el uso de doble búferes", 10, h/2);
g.setColor(Color.yellow) ;
g.fillOval(mx - gap, my - gap, gap*2+l, gap*2+l);
if (! flicker) {
screengc.drawImage(buffer, 0, 0, null);
}
}
public void update(Graphics g) {
paint(g) ;
}
}

Número 4
/*
* <applet code="TrackedImageLoad" width=300 height=400>
* <param name="img"
* value="vincent+leonardo+matisse+picasso+renoir+seurat+vermeer" >
* </applet>
*/
import java.util.*;
import java. applet. *;
import java.awt.*;
public class TrackedImageLoad extends Applet implements Runnable {
MediaTracker tracker;
int tracked;
int frame_rate = 5;
int current_img = 0;
Thread motor;
static final int MAXIMAGES = 10;
Image img[] = new Image[MAXIMAGES];
String name[] = new String[MAXIMAGES];
boolean stopFlag;
public void init() {
tracker = new MediaTracker(this);
StringTokenizer st = new StringTokenizer(getParameter("img"), "+");
while(st.hasMoreTokens() && tracked <= MAXIMAGES) {
name[tracked] = st.nextToken();
img[tracked] = getImage(getDocumentBase(), 
name[tracked] + ".jpg");
tracker.addImage(img[tracked], tracked);
tracked++;
}
}
public void paint(Graphics g) {
String loaded = "";
int donecount = 0;
for(int i=0; i<tracked; i++) {
if (tracker.checkID(i, true)) {
donecount++;
loaded += name[i] + " ";
}
}
Dimension d =getSize();
int w = d.width;
int h = d.height;
if (donecount == tracked) {
frame_rate = 1;
Image i = img[current_img++];
int iw = i.getWidth(null);
int ih = i.getHeight(null);
g.drawImage(i, (w - iw)/2, (h - ih)/2, null);
if (current_img >= tracked)
current_img = 0;
} else {
int x = w * donecount / tracked;
g.setColor(Color.black);
g.fillRect(0, h/3, x, 16);
g.setColor(Color.white) ;
g.fillRect(x, h/3, w-x, 16);
g.setColor(Color.black);
g.drawString(loaded, 10, h/2);
}
}
public void start() {
motor = new Thread(this);
stopFlag = false;
motor.start();
}
public void stop() {
stopFlag = true;
}
public void run() {
motor.setPriority(Thread.MIN_PRIORITY);
while (true) {
repaint() ;
try {
Thread.sleep (l000/frame_rate) ;
} catch (InterruptedException e) { 
System.out.println("Interrupción");
return;
}
if(stopFlag)
return;
}
}
}

Número 5
/*
* <applet code="MemoryImageGenerator" width=256 height=256>
* </applet>
*/
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
public class MemoryImageGenerator extends Applet {
Image img;
public void init() {
Dimension d = getSize();
int w = d.width;
int h = d.height;
int pixels[] = new int[w * h];
int i =0;
for(int y=0; y<h; y++) {
for(int x=0; x<w; x++) {
int r = (x ^ y)& 0xff;
int g = (x*2 ^ y*2)& 0xff;
int b = (x*4 ^ y*4)& 0xff;
pixels[i++]= (255 << 24) | (r << 16) | (g << 8) | b;
}
}
img =createImage(new MemoryImageSource(w, h, pixels, 0, w));
}
public void paint(Graphics g) {
g.drawImage(img, 0, 0, this);
}
}

Número 6
/*
* <appletcode=HistoGrab.class width=341 height=400>
* <param name=img value=vermeer.jpg>
* </applet> */
import java.applet.*;
import java.awt.* ;
import java.awt.image.*;
public class HistoGrab extends Applet {
Dimension d;
Image img;
int iw, ih;
int pixels[];
int w, h;
int hist[] =new int[256];
int max_hist = 0;
public void init() {
d =getSize();
w = d.width;
h =d.height;
try {
img = getImage(getDocumentBase(), getParameter("img"));
MediaTracker t = new MediaTracker(this);
t.addImage(img, 0);
t.waitForID(0);
iw = img.getWidth(null);
ih =img.getHeight(null);
pixels =new int[iw * ih];
PixelGrabber pg =new PixelGrabber(img, 0, 0, iw, ih,
pixels, 0, iw);
pg.grabPixels();
} catch (InterruptedException e) { 
System.out.println("Interrupción");
return;
}
for (int i=0; i<iw*ih; i++) {
int p = pixels[i];
int r = 0xff & (p >> 16);
int g = 0xff & (p >> 8);
int b = 0xff & (p);
int y = (int) (.33 * r + .56 * g + .11 * b);
hist[y]++;
}
for (int i=0; i<256; i++) {
if (hist[i] > max_hist)
max_hist =hist[i];
}
}
public void update() {}
public void paint(Graphics g) {
g.drawImage(img, 0, 0, null);
int x = (w - 256) / 2;
int lasty = h - h * hist[0] / max_hist;
for (int i=0; i<256; i++, x++) {
int y = h - h * hist[i] / max_hist;
g.setColor(new Color(i, i, i));
g.fillRect(x, y, 1, h);
g.setColor(Color.red);
g.drawLine(x-l, lasty, x, y);
lasty = y;
}
}
}

Número 7
/*
* <applet code=TileImage.class width=288 height=399>
* <param name=img value=picasso.jpg>
* </applet>
*/
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
public class TileImage extends Applet {
Image img;
Image cell[] =new Image[4*4];
int iw, ih;
int tw, th;
public void init() {
try {
img = getImage(getDocumentBase(), getparameter("img"));
MediaTracker t =new MediaTracker(this);
t.addImage(img, 0);
t.waitForID(0) ;
iw = img.getWidth(null);
ih = img.getHeight(null);
tw = iw / 4;
th = ih / 4;
CropImageFilter f;
FilteredImageSource fis;
t =new MediaTracker(this);
for (int y=0; y<4; y++) {
for (int x=0; x<4; x++) {
f = new CropImageFilter(tw*x, th*y, tw, th);
fis = new FilteredImageSource(img.getSource(), f);
int i = y*4+x;
cell[i] = createImage(fis);
t.addImage(cell[i], i);
}
}
t.waitForAll () ;
for (int i=0; i<32; i++) {
int si = (int) (Math.random() * 16);
int di = (int) (Math.random() * 16);
Image tmp = cell[si];
cell[si] = cell[di];
cell [di] = tmp:
}
} catch (InterruptedException e) { 
System.out.println("Interrupción");
}
}
public void update(Graphics g) {
paint(g) :
}
public void paint(Graphics g) {
for (int y=0; y<4; y++) {
for (int x=0; x<4: x++) {
g.drawImage(cell[y*4+x], x * tw, y * th, null);
}
}
}
}

Número 8
/*
* <applet code=ImageFilterDemo width=350 height=450>
* <param name=img value=vincent.jpg>
* <param name=filters value="Grayscale+Invert+Contrast+Blur+ Sharpen">
* </applet>
*/
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
public class ImageFilterDemo extends Applet implements ActionListener {
Image img;
PlugInFilter pif;
Image fimg;
Image curImg;
LoadedImage lim;
Label lab;
Button reset;
public void init() {
setLayout(new BorderLayout());
Panel p = new panel();
add(p, BorderLayout.SOUTH);
reset = new Button("Reset");
reset.addActionListener(this);
p.add(reset);
StringTokenizer st = new StringTokenizer(getParameter("filters"), "+");
while(st.hasMoreTokens()) {
Button b = new Button(st.nextToken());
b.addActionListener(this);
p.add(b);
}
lab = new Label("");
add(lab, BorderLayout.NORTH);
img = getImage(getDocumentBase(), getParameter("img"));
lim = new LoadedImage (img);
add(lim, BorderLayout.CENTER);
}
public void actionPerformed(ActionEvent ae) {
String a = "";
try{
a = ae.getActionCommand();
if (a.equals("Reset")) {
lim.set(img) ;
lab. setText ("Normal" ) ;
}
else{
pif = (PlugInFilter) Class.forName(a).newInstance();
fimg = pif.filter(this, img);
lim.set(fimg);
lab.setText("Filtro: " + a);
}
repaint();
} catch (ClassNotFoundException e) {
lab.setText(a + " no encontrada");.
lim.set(img) ;
repaint();
} catch (InstantiationException e) {
lab.setText("No se pudo crear un nuevo " + a);
} catch (IllegalAccessException e) {
lab.setText("Sin acceso a: " + a);
}
}
}

Número 9
interface PlugInFilter {
java.awt.Image filter(java.applet.Applet a, java.awt.Image in);
}

Número 10
import java.awt.*;
public class LoadedImage extends Canvas {
Image img;
public LoadedImage(Image i) {
set(i) ;
}
void set(Image i) {
MediaTracker mt =new MediaTracker(this);
mt.addImage(i, 0);
try {
mt.waitForAll () ;
} catch (InterruptedException e) {
System.out.println("Interrupción");
return;
}
img = i;
repaint () ;
}
public void paint(Graphics g) {
if (img == null) {
g.drawString("sin imagen", 10, 30);
} else {
g.drawImage(img, 0, 0, this);
}
}
public Dimension getPreferredSize() {
return new Dimension(img.getWidth(this), img.getHeight(this));
}
public Dimension getMinimumSize() {
return getPreferredSize();
}
}

Número 11
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
class Grayscale extends RGBImageFilter implements PluglnFilter {
public Image filter(Applet a, Image in) {
return a.createImage(new FilteredImageSource(in.getSource(), this));
}
public int filterRGB(int x, int y, int rgb) {
int r = (rgb >> 16) & 0xff;
int g = (rgb >> 8) & 0xff;
int b = rgb & 0xff;
int k = (int) (.56 * g + .33 * r + .11 * b);
return (0xff000000 | k << 16 | k << 8 | k);
}
}

Número 12
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
class Invert extends RGBImageFilter implements PluglnFilter {
public Image fi1ter(Applet a, Image in) {
return a.createImage(new FilteredImageSource(in.getSource(), this));
}
public int filterRGB(int x, int y, int rgb) {
int r = 0xff - (rgb >> 16) & 0xff;
int g = 0xff - (rgb >> 8) & 0xff;
int b = 0xff - rgb & 0xff;
return (0xff000000 | r << 16 | g << 8 | b);
}
}

Número 13
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
public class Contrast extends RGBImageFilter implements PluglnFilter {
public Image filter(Applet a, Image in) {
return a.createImage(new FilteredImageSource(in.getSource(), this));
}
private int multclamp(int in, double factor) {
in = (int) (in * factor);
return in > 255 ? 255 : in;
}
double gain = 1.2;
private int cont(int in) {
return (in < 128) ? (int) (in/gain) : multclamp(in, gain);
}
public int filterRGB(int x, int y, int rgb) {
int r =cont((rgb >> 16) & 0xff);
int g = cont((rgb >> 8) & 0xff);
int b = cont(rgb & 0xff);
return (0xff000000 | r << 16 | g << 8 | b);
}
}

Número 14
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
abstract class Convolver implements ImageConsumer, PluglnFilter {
int width, height;
int imgpixels[], newimgpixels[];
boolean imageReady = false;
abstract void convolve(); // aquí va el filtro...
public Image filter(Applet a, Image in) {
in.getSource().startProduction(this);
imageReady = false;
waitForImage();
newimgpixels =new int[width*height];
try{
convolve ();
} catch (Exception e) {
System.out.println("Fallo en la convolución: " + e);
e.printStackTrace();
}
return a.createImage(
new MemoryImageSource(width, height, newimgpixels, 0, width));
}
synchronized void waitForImage() {
try { 
while (!imageReady) wait (); 
} catch (Exception e) { 
System.out.println("Interrupción");
}
}
public void setProperties(java.util.Hashtable dummy) { }
public void setColorModel(ColorModel dummy) { }
public void setHints(int dummy) { }
public synchronized void imageComplete(int dummy) {
imageReady = true;
notifyAll ( ) ;
}
public void setDimensions(int x, int y) {
width = x;
height = y;
imgpixels = new int [x*y] ;
}
public void setPixels(int xl, int yl, int w, int h,
ColorModel model, byte pixels[], int off, int scansize) {
int pix, x, y, x2, y2, sx, sy;
x2 = xl+w;
y2 = yl+h;
sy = off;
for(y=yl; y<y2; y++) {
sx = sy;
for(x=xl; x<x2; x++) {
pix = model.getRGB(pixels[sx++]);
if((pix & 0xff000000) == 0)
pix = 0x00ffffff;
imgpixels[y*width+x] =pix;
}
sy += scansize;
}
}
public void setPixels(int xl, int yl, int w, int h,
ColorModel model, int pixels[], int off, int scansize) {
int pix, x, y, x2, y2, sx, sy;
x2 = xl+w;
y2 = yl+h;
sy = off;
for(y=yl; y<y2; y++) {
sx = sy;
for(x=xl; x<x2; x++) {
pix = model.getRGB(pixels[sx++]);
if((pix & 0xff000000) == 0)
pix = 0x00ffffff;
imgpixels[y*width+x] =pix;
}
sy += scansize;
}
}
}

Número 15
public class Blur extends Convolver {
public void convolve() {
for(int y=l; y<height-l; y++) {
for(int x=l; x<width-l; x++) {
int rs = 0;
int gs = 0;
int bs = 0;
for(int k=-l; k<=l; k++) {
for(int j=-l; j<=l; j++) {
int rgb = imgpixels[(y+k)*width+x+j];
int r = (rgb >> 16) & 0xff;
int g = (rgb >> 8) & 0xff;
int b = rgb & 0xff;
rs += r;
gs += g;
bs += b;
}
}
rs /= 9;
gs /= 9;
bs /= 9;
new imgpixels[y*width+x] = (0xff000000 |
rs << 16 | gs << 8 | bs);
}
}
}
}

Número 16
public class Sharpen extends Convolver {
private final int clamp(int c) {
return (c > 255 ? 255 : (e < 0 ? 0 : c));
}
public void convolve() {
int r0=0, g0=0, b0=0;
for(int y=l; y<height-l; y++) {
for(int x=1; x<width-1; x++) {
int rs = 0;
int gs = 0;
int bs = 0;
for(int k=-1; k<=1; k++) {
for(int j=-1; j<=1; j++) {
int rgb = imgpixels[(y+k)*width+x+j];
int r = (rgb >> 16) & 0xff;
int g = (rgb >> 8) & 0xff;
int b = rgb & 0xff;
if (j == 0 && k == 0) {
r0 =r;
g0 =g;
b0 =b;
} e1se {
rs += r;
gs += g;
bs +=b;
}
}
}
rs >>= 3;
gs >>= 3;
bs >>= 3;
newimgpixels[y*width+x] = (0xff000000 |
clamp(r0+r0-rs) << 16 |
clamp(g0+g0-gs) << 8 |
clamp(b0+b0-bs));
}
}
}
}

Número 17
// Ejemplo de animación.
import java.applet.*;
import java.awt.*;
import java.awt.image.*;
import java.util.*;
public class Animation extends Applet implements Runnable {
Image cell[] ;
final int MAXSEQ = 64;
int sequence [] ;
int nseq;
int idx;
int framerate;
boolean stopFlag;
private int intDef(String s, int def) {
int n = def;
if (s != null)
try {
n = Integer.parselnt(s);
} catch (NumberFormatException e) { 
System.out.println("Excepción en el Formato de Números ");
}
return n;
}
public void init() {
framerate = intDef(getParameter("framerate"), 5);
int tilex = intDef (getParameter ("cols"), 1);
int tiley =intDef (getParameter ("rows"), 1);
cell = new Image[tilex*tiley];
StringTokenizer st =new
StringTokenizer(getParameter( "sequence"), ",");
sequence = new int[MAXSEQ];
nseq = 0;
while(st.hasMoreTokens() && nseq < MAXSEQ) {
sequence[nseq] = intDef(st.nextToken(), 0);
nseq++;
}
try {
Image img = getImage(getDocumentBase(), getParameter("img"));
MediaTracker t = new MediaTracker(this) ;
t. addImage (img, 0);
t.waitForID(0) ;
int iw = img.getWidth(null);
int ih = img.getHeight(null);
int tw = iw / tilex;
int th = ih / ti1ey;
CropImageFilter f;
FilteredImageSource fis;
for (int y=0; y<tiley; y++) {
for (int x=0; x<tilex; x++) {
f = new CropImageFilter(tw*x, th*y, tw, th);
fis = new FilteredImageSource(img.getSource(), f);
int i = y*tilex+x;
cell[i] = createImage(fis);
t.addImage(cell[i], i);
}
}
t. waitForAll () ;
} catch (InterruptedException e) { 
System.out.println("Carga de la Imagen Interrumpida");
}
}
public void update(Graphics g) { }
pub1ic void paint(Graphics g) {
g.drawImage(cell[sequence[idx]], 0, 0, null);
}
Thread t;
pub1ic void start() {
t = new Thread(this);
stopF1ag = fa1se;
t.start();
}
pub1ic void stop(){
stopF1ag =true;
}
pub1ic void run() {
idx =0;
while (true) {
paint(getGraphics());
idx = (idx + 1) % nseq;
try {
Thread.s1eep(1000/framerate); 
} catch (InterruptedException e) { 
System.out.println("Animación Interrumpida");
return;
}
if(stopF1ag)
return;
}
}
}